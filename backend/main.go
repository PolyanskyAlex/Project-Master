package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"project-manager/config"
	"project-manager/database"
	"project-manager/router"
	"project-manager/utils"
)

func main() {
	fmt.Println("Project Manager Backend")

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg := config.LoadConfig()

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
	if cfg.DatabaseURL != "" {
		fmt.Println("Attempting to connect to database...")
		err := database.ConnectDB(cfg.DatabaseURL)
		if err != nil {
			fmt.Printf("Database connection failed: %v\n", err)
			fmt.Println("Continuing without database...")
		} else {
			// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
			migrationsPath := "./database/migrations"
			err = database.RunMigrations(cfg.DatabaseURL, migrationsPath)
			if err != nil {
				fmt.Printf("Migration failed: %v\n", err)
				fmt.Println("Continuing without migrations...")
			}
		}
	} else {
		fmt.Println("DATABASE_URL not set, skipping database connection")
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
	r := router.NewRouter(cfg)

	// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ
	preferredPort, err := utils.ParsePort(cfg.ServerPort)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Ä—Ç–∞: %v, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8080", err)
		preferredPort = 8080
	}

	actualPort, err := utils.FindAvailablePort(preferredPort)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç: %v", err)
	}

	// –ï—Å–ª–∏ –ø–æ—Ä—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if actualPort != preferredPort {
		fmt.Printf("‚ö†Ô∏è  –ü–æ—Ä—Ç %d –∑–∞–Ω—è—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç %d\n", preferredPort, actualPort)
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è frontend
	if err := utils.WriteServerInfo(actualPort); err != nil {
		log.Printf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ: %v", err)
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
	setupGracefulShutdown()

	// –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
	address := fmt.Sprintf(":%d", actualPort)
	log.Printf("üöÄ Server starting on port %d", actualPort)
	log.Printf("üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:%d", actualPort)
	log.Printf("üîó Health check: http://localhost:%d/health", actualPort)

	if err := http.ListenAndServe(address, r); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}

// setupGracefulShutdown –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
func setupGracefulShutdown() {
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)

	go func() {
		<-c
		fmt.Println("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")

		// –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ
		utils.CleanupServerInfo()

		fmt.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
		os.Exit(0)
	}()
}
