package services

import (
	"fmt"
	"project-master/internal/models"
	"time"
)

type TaskExecutionCommentService struct {
	commentService *CommentService
	taskService    *TaskService
}

func NewTaskExecutionCommentService(commentService *CommentService, taskService *TaskService) *TaskExecutionCommentService {
	return &TaskExecutionCommentService{
		commentService: commentService,
		taskService:    taskService,
	}
}

// AddExecutionStartComment –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
func (s *TaskExecutionCommentService) AddExecutionStartComment(taskID uint, executionID string, strategy string) error {
	comment := &models.Comment{
		TaskID:    taskID,
		Author:    "AI-Agent",
		Content:   fmt.Sprintf("ü§ñ –ù–∞—á–∞—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏\n\n**ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** %s\n**–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** %s\n**–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:** %s", executionID, strategy, time.Now().Format("15:04:05")),
		Type:      "system",
		CreatedAt: time.Now(),
	}

	return s.commentService.CreateComment(comment)
}

// AddExecutionProgressComment –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
func (s *TaskExecutionCommentService) AddExecutionProgressComment(taskID uint, executionID string, step string, progress int) error {
	comment := &models.Comment{
		TaskID:    taskID,
		Author:    "AI-Agent",
		Content:   fmt.Sprintf("‚öôÔ∏è –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %d%%\n\n**–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø:** %s\n**ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** %s", progress, step, executionID),
		Type:      "system",
		CreatedAt: time.Now(),
	}

	return s.commentService.CreateComment(comment)
}

// AddExecutionCompleteComment –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
func (s *TaskExecutionCommentService) AddExecutionCompleteComment(taskID uint, executionID string, success bool, executionTime int64, result string) error {
	var icon, status string
	if success {
		icon = "‚úÖ"
		status = "—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
	} else {
		icon = "‚ùå"
		status = "–∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π"
	}

	content := fmt.Sprintf("%s –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ %s\n\n**ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** %s\n**–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** %d –º—Å\n**–†–µ–∑—É–ª—å—Ç–∞—Ç:** %s",
		icon, status, executionID, executionTime, result)

	comment := &models.Comment{
		TaskID:    taskID,
		Author:    "AI-Agent",
		Content:   content,
		Type:      "system",
		CreatedAt: time.Now(),
	}

	return s.commentService.CreateComment(comment)
}

// AddExecutionErrorComment –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –æ—à–∏–±–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
func (s *TaskExecutionCommentService) AddExecutionErrorComment(taskID uint, executionID string, errorMsg string) error {
	comment := &models.Comment{
		TaskID:    taskID,
		Author:    "AI-Agent",
		Content:   fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏\n\n**ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** %s\n**–û—à–∏–±–∫–∞:** %s\n**–í—Ä–µ–º—è:** %s", executionID, errorMsg, time.Now().Format("15:04:05")),
		Type:      "system",
		CreatedAt: time.Now(),
	}

	return s.commentService.CreateComment(comment)
}
