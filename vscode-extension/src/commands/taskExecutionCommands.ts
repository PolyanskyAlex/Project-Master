import * as vscode from 'vscode';
import { TaskExecutionService } from '../services/TaskExecutionService';
import { ApiService } from '../services/ApiService';
import { ConfigurationService } from '../services/ConfigurationService';
import { Logger } from '../utils/Logger';
import { DevelopmentStrategy } from '../strategies/DevelopmentStrategy';
import { BugFixStrategy } from '../strategies/BugFixStrategy';
import { ExecutionStatus } from '../types/execution';

export class TaskExecutionCommands {
  private executionService: TaskExecutionService;

  constructor() {
    const configService = new ConfigurationService();
    const logger = new Logger();
    const apiService = new ApiService(configService, logger);
    this.executionService = new TaskExecutionService(apiService);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    this.executionService.registerStrategy(new DevelopmentStrategy());
    this.executionService.registerStrategy(new BugFixStrategy());
  }

  registerCommands(context: vscode.ExtensionContext): void {
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ
    const executeTaskCommand = vscode.commands.registerCommand(
      'projectMaster.executeTask',
      () => this.executeTaskCommand()
    );

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ ID
    const executeTaskByIdCommand = vscode.commands.registerCommand(
      'projectMaster.executeTaskById',
      () => this.executeTaskByIdCommand()
    );

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const showExecutionHistoryCommand = vscode.commands.registerCommand(
      'projectMaster.showExecutionHistory',
      () => this.showExecutionHistoryCommand()
    );

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ç—Ä–∏–∫
    const showExecutionMetricsCommand = vscode.commands.registerCommand(
      'projectMaster.showExecutionMetrics',
      () => this.showExecutionMetricsCommand()
    );

    context.subscriptions.push(
      executeTaskCommand,
      executeTaskByIdCommand,
      showExecutionHistoryCommand,
      showExecutionMetricsCommand
    );
  }

  private async executeTaskCommand(): Promise<void> {
    try {
      // –ó–∞–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const command = await vscode.window.showInputBox({
        prompt: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏',
        placeHolder: '–ù–∞–ø—Ä–∏–º–µ—Ä: –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É 123 –∏–ª–∏ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"',
        validateInput: (value) => {
          if (!value || value.trim().length === 0) {
            return '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π';
          }
          if (value.length > 200) {
            return '–ö–æ–º–∞–Ω–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è';
          }
          return null;
        }
      });

      if (!command) {
        return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥
      }

      await this.executeWithProgress(command);

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      vscode.window.showErrorMessage(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${errorMessage}`);
    }
  }

  private async executeTaskByIdCommand(): Promise<void> {
    try {
      // –ó–∞–ø—Ä–æ—Å ID –∑–∞–¥–∞—á–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const taskId = await vscode.window.showInputBox({
        prompt: '–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
        placeHolder: '–ù–∞–ø—Ä–∏–º–µ—Ä: 123',
        validateInput: (value) => {
          if (!value || value.trim().length === 0) {
            return 'ID –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
          }
          if (!/^\d+$/.test(value.trim())) {
            return 'ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã';
          }
          return null;
        }
      });

      if (!taskId) {
        return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥
      }

      const command = `–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É ${taskId.trim()}`;
      await this.executeWithProgress(command);

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      vscode.window.showErrorMessage(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${errorMessage}`);
    }
  }

  private async executeWithProgress(command: string): Promise<void> {
    await vscode.window.withProgress({
      location: vscode.ProgressLocation.Notification,
      title: "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
      cancellable: true
    }, async (progress, token) => {
      
      progress.report({ increment: 0, message: "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..." });

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã
      if (token.isCancellationRequested) {
        return;
      }

      progress.report({ increment: 20, message: "–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏..." });

      try {
        const result = await this.executionService.executeTask(command);

        progress.report({ increment: 50, message: "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏..." });

        if (token.isCancellationRequested) {
          return;
        }

        progress.report({ increment: 100, message: "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ..." });

        // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (result.success) {
          vscode.window.showInformationMessage(
            `‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: ${result.context.selectedTask.title}`,
            '–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏'
          ).then(selection => {
            if (selection === '–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏') {
              this.showExecutionDetails(result);
            }
          });
        } else {
          vscode.window.showErrorMessage(
            `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${result.error}`,
            '–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏'
          ).then(selection => {
            if (selection === '–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏') {
              this.showExecutionDetails(result);
            }
          });
        }

      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        vscode.window.showErrorMessage(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${errorMessage}`);
      }
    });
  }

  private async showExecutionHistoryCommand(): Promise<void> {
    const history = this.executionService.getExecutionHistory();
    
    if (history.length === 0) {
      vscode.window.showInformationMessage('–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø—É—Å—Ç–∞');
      return;
    }

    const items = history.map((result, index) => ({
      label: `${result.success ? '‚úÖ' : '‚ùå'} ${result.context.selectedTask.title || 'Unknown Task'}`,
      description: `${result.executionTime}ms - ${result.context.strategy}`,
      detail: result.success ? '–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : `–û—à–∏–±–∫–∞: ${result.error}`,
      result
    }));

    const selected = await vscode.window.showQuickPick(items, {
      placeHolder: '–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π'
    });

    if (selected) {
      this.showExecutionDetails(selected.result);
    }
  }

  private async showExecutionMetricsCommand(): Promise<void> {
    const metrics = this.executionService.getMetrics();
    
    const message = `
üìä –ú–µ—Ç—Ä–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á:

‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${metrics.totalExecutions}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${metrics.successfulExecutions}
‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${metrics.failedExecutions}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${Math.round(metrics.averageExecutionTime)}ms

üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏:
${Object.entries(metrics.strategiesUsed)
  .filter(([_, count]) => count > 0)
  .map(([strategy, count]) => `‚Ä¢ ${strategy}: ${count}`)
  .join('\n')}

${Object.keys(metrics.commonErrors).length > 0 ? 
  `‚ö†Ô∏è –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏:\n${Object.entries(metrics.commonErrors)
    .map(([error, count]) => `‚Ä¢ ${error}: ${count}`)
    .join('\n')}` : ''}
    `.trim();

    vscode.window.showInformationMessage(message, { modal: true });
  }

  private showExecutionDetails(result: any): void {
    const panel = vscode.window.createWebviewPanel(
      'taskExecutionDetails',
      '–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏',
      vscode.ViewColumn.One,
      { enableScripts: true }
    );

    panel.webview.html = this.getExecutionDetailsHtml(result);
  }

  private getExecutionDetailsHtml(result: any): string {
    return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</title>
    <style>
        body { font-family: var(--vscode-font-family); padding: 20px; }
        .header { border-bottom: 1px solid var(--vscode-panel-border); padding-bottom: 10px; }
        .status { font-weight: bold; }
        .success { color: var(--vscode-terminal-ansiGreen); }
        .error { color: var(--vscode-terminal-ansiRed); }
        .section { margin: 20px 0; }
        .step { margin: 5px 0; padding: 5px; background: var(--vscode-editor-background); }
        .log { font-family: monospace; background: var(--vscode-terminal-background); padding: 10px; margin: 10px 0; }
    </style>
</head>
<body>
    <div class="header">
        <h2>${result.context.selectedTask.title}</h2>
        <div class="status ${result.success ? 'success' : 'error'}">
            ${result.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ'}
        </div>
    </div>

    <div class="section">
        <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ</h3>
        <p><strong>ID:</strong> ${result.context.selectedTask.id}</p>
        <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${result.context.selectedTask.description}</p>
        <p><strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> ${result.context.selectedTask.priority}</p>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${result.context.selectedTask.status}</p>
        <p><strong>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</strong> ${result.context.strategy}</p>
    </div>

    <div class="section">
        <h3>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ</h3>
        <p><strong>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> ${result.executionTime}ms</p>
        <p><strong>–ö–æ–º–∞–Ω–¥–∞:</strong> ${result.context.command.originalCommand}</p>
        ${result.error ? `<p class="error"><strong>–û—à–∏–±–∫–∞:</strong> ${result.error}</p>` : ''}
    </div>

    ${result.steps && result.steps.length > 0 ? `
    <div class="section">
        <h3>–®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
        ${result.steps.map((step: any) => `
            <div class="step">
                <strong>${step.name}</strong> - ${step.status}
                ${step.error ? `<br><span class="error">–û—à–∏–±–∫–∞: ${step.error}</span>` : ''}
            </div>
        `).join('')}
    </div>
    ` : ''}

    ${result.logs && result.logs.length > 0 ? `
    <div class="section">
        <h3>–õ–æ–≥–∏</h3>
        <div class="log">
            ${result.logs.join('<br>')}
        </div>
    </div>
    ` : ''}
</body>
</html>
    `;
  }
} 