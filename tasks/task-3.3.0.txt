**>>>ЗАДАЧА<<< 3.3.0: Реализация страниц CRUD для Функциональных Блоков**
*   **Статус:** Ожидание
*   **Зависимости:** 2.1.0, 3.2.0
*   **Приоритет:** Средний
*   **Ответственный:** AI-Frontend-Agent
*   **Подробнейшее Описание:**
    *   **Логика работы:** Создать страницу `FunctionalBlocksPage` для отображения списка функциональных блоков в таблице. Реализовать формы для создания и редактирования функциональных блоков. Интегрировать API-клиент для взаимодействия с Go-бэкендом.
    *   **Схемы/диаграммы:**
        ```
        [FunctionalBlocksPage]
        +---------------------------------+
        | Заголовок: Функциональные Блоки |
        |                                 |
        | [Кнопка: Создать Блок]          |
        |                                 |
        | Таблица:                        |
        | +----+----------+---------+----+
        | | ID | Название | Префикс | Действия |
        | +----+----------+---------+----+
        | | .. | ..       | ..      | [Ред][Уд] |
        | +----+----------+---------+----+
        +---------------------------------+
        ```
    *   **Примеры кода:**
        ```javascript
        // src/pages/FunctionalBlocksPage.js
        import React, { useState, useEffect } from 'react';
        import { getFunctionalBlocks, createFunctionalBlock, updateFunctionalBlock, deleteFunctionalBlock } from '../services/functionalBlockService';
        function FunctionalBlocksPage() {
            const [blocks, setBlocks] = useState([]);
            useEffect(() => {
                getFunctionalBlocks().then(setBlocks);
            }, []);
            // ... логика для форм и кнопок
            return (/* JSX для таблицы и форм */);
        }
        export default FunctionalBlocksPage;
        ```
    *   **Цель задачи:** Предоставить Пользователю UI для управления функциональными блоками.
    *   **Входные данные:** Данные функциональных блоков.
    *   **Выходные данные/Ожидаемый результат:** Пользователь может создавать, просматривать, редактировать, удалять функциональные блоки через веб-интерфейс.
*   **Критерии Приемки:**
    *   Все операции CRUD для функциональных блоков работают корректно через UI.
    *   Валидация префикса отображается в UI.
*   **Технические Детали/Инструкции:**
    *   Использовать `fetch` или `axios` для HTTP-запросов.
    *   Обеспечить обработку ошибок и отображение сообщений пользователю.
*   **Связанные Артефакты:** FT-FUNCBLOCK.1-5, FT-WEB.2, FT-WEB.3.
*   **<<<Окончание задачи>>> 3.3.0**