**>>>ЗАДАЧА<<< 2.2.0: Реализация CRUD для Проектов**
*   **Статус:** Ожидание
*   **Зависимости:** 1.2.0, 1.3.0, 1.4.0
*   **Приоритет:** Высокий
*   **Ответственный:** AI-Backend-Agent
*   **Подробнейшее Описание:**
    *   **Логика работы:**
        *   Определить `models.Project` (id, name, description, status, created_at, updated_at).
        *   Реализовать `repositories.ProjectRepository` с методами `Create`, `GetByID`, `GetAll`, `Update`, `Delete`.
        *   Реализовать `services.ProjectService` с методами `CreateProject`, `GetProjectByID`, `GetAllProjects`, `UpdateProject`, `DeleteProject`.
        *   Реализовать `handlers.ProjectHandler` с HTTP-методами для CRUD-операций.
        *   Зарегистрировать маршруты в `router/router.go`: `GET /api/v1/projects`, `POST /api/v1/projects`, `GET /api/v1/projects/{id}`, `PUT /api/v1/projects/{id}`, `DELETE /api/v1/projects/{id}`.
        *   При удалении проекта, обеспечить каскадное удаление связанных задач, комментариев, документов, логов операций и записей плана разработки (через `ON DELETE CASCADE` в схеме БД).
    *   **Схемы/диаграммы:** См. 2.5. Модели Данных (`projects`).
    *   **Примеры кода:** Аналогично 2.1.0, но для сущности Project.
    *   **Цель задачи:** Обеспечить полный CRUD функционал для управления проектами через API.
    *   **Входные данные:** JSON-объекты проектов.
    *   **Выходные данные/Ожидаемый результат:** Успешное создание, чтение, обновление, удаление проектов через API.
*   **Критерии Приемки:**
    *   API-эндпоинты для проектов доступны и отвечают 200 OK/201 Created.
    *   Удаление проекта успешно удаляет его и все связанные сущности из БД.
    *   Все операции логируются.
*   **Технические Детали/Инструкции:**
    *   Использовать `ON DELETE CASCADE` в схеме БД для связей с `projects`.
*   **Связанные Артефакты:** FT-PROJ.1-5, FT-BE.1-6.
*   **<<<Окончание задачи>>> 2.2.0** 