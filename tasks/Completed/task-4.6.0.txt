**>>>ЗАДАЧА<<< 4.6.0: Реализация "Пуш" функционала для Cursor IDE**
*   **Статус:** Ожидание
*   **Зависимости:** 2.3.0, 2.6.0, 4.4.0
*   **Приоритет:** Высокий
*   **Ответственный:** AI-Frontend-Agent
*   **Подробнейшее Описание:**
    *   **Логика работы:**
        *   **`pushNextTask` (FT-IDE.4.6):** Команда, которая:
            *   Запрашивает у бэкенда следующую задачу по плану (`GET /api/v1/projects/{id}/plan/next-task`).
            *   Если задача найдена и ее статус "To Do", "In Progress" или "Blocked", расширение предлагает Пользователю "взять задачу в работу" (например, через `showInformationMessage` с кнопкой "Взять в работу").
            *   При подтверждении, расширение может открыть связанные файлы или предложить создать новую ветку Git (вне scope этого этапа, но для будущего).
        *   **`pushFixDefect` (FT-IDE.4.7):** Команда, которая:
            *   Запрашивает у бэкенда дефекты, связанные с текущей задачей (если текущая задача выбрана в IDE или указана).
            *   Предлагает Пользователю исправить дефект (например, открывает файл, связанный с дефектом, или предлагает создать новую ветку).
        *   **`pushCreateDefect` (FT-IDE.4.8):** Команда, которая:
            *   Открывает форму для создания новой задачи типа "Дефект" (аналогично `createTask`), но с автоматической привязкой к текущей задаче (если выбрана).
        *   **`pushTestTask` (FT-IDE.4.9):** Команда, которая:
            *   Запрашивает у Пользователя подтверждение о проведении тестирования.
            *   Если Пользователь отвечает, что тестирование не проводилось, расширение уведомляет об этом и ждет дальнейших команд.
            *   Если тестирование проводилось, расширение может предложить обновить статус задачи или добавить комментарий.
        *   **`refactorProjectPlan` (FT-IDE.5.3, `action: "refactorProjectPlan"`):** Команда, которая:
            *   Получает текущий список задач проекта от бэкенда (или из кэша расширения).
            *   Предлагает Пользователю (через UI расширения, например, Quick Pick с возможностью переупорядочивания или Webview с drag-and-drop) переупорядочить задачи.
            *   Отправляет обновленный порядок задач на бэкенд (`PUT /api/v1/projects/{id}/plan`).
    *   **Схемы/диаграммы:** Нет.
    *   **Примеры кода:**
        ```typescript
        // src/commands/taskCommands.ts (фрагмент)
        export async function pushNextTaskCommand() {
            const projectId = await vscode.window.showInputBox({ prompt: 'Enter Project ID to get next task' });
            if (!projectId) return;
            try {
                const nextTask = await pmApiClient.getNextTaskInPlan(projectId);
                if (nextTask) {
                    const takeAction = await vscode.window.showInformationMessage(
                        `Next task: ${nextTask.number} - ${nextTask.title} (${nextTask.status}). Take it?`,
                        'Yes', 'No'
                    );
                    if (takeAction === 'Yes') {
                        // Логика "взять в работу": например, обновить статус на "In Progress"
                        await pmApiClient.updateTask(nextTask.id, { status: "In Progress" });
                        vscode.window.showInformationMessage(`Task ${nextTask.number} is now In Progress.`);
                    }
                } else {
                    vscode.window.showInformationMessage('No next task found in plan.');
                }
            } catch (error: any) {
                vscode.window.showErrorMessage(`Failed to get next task: ${error.message}`);
            }
        }
        ```
    *   **Цель задачи:** Обеспечить интерактивное взаимодействие между PM-системой и Cursor IDE, имитируя "пуш" уведомления и запросы к агенту.
    *   **Входные данные:** Запросы Пользователя, данные задач и плана.
    *   **Выходные данные/Ожидаемый результат:** Cursor IDE предлагает Пользователю действия на основе состояния PM-системы.
*   **Критерии Приемки:**
    *   Все "пуш" команды доступны и инициируют соответствующую логику.
    *   Cursor IDE корректно запрашивает следующую задачу только со статусами "To Do", "In Progress", "Blocked".
    *   Создание дефекта через IDE привязывается к родительской задаче.
    *   Логика тестирования корректно обрабатывает отсутствие информации о тестировании.
    *   Рефакторинг плана позволяет Пользователю изменить порядок задач и сохраняет его.
*   **Технические Детали/Инструкции:**
    *   Использовать `vscode.window.showInformationMessage` с кнопками для интерактивных запросов.
    *   Для рефакторинга плана, можно использовать `vscode.window.showQuickPick` с опцией `canPickMany` и ручной сортировкой, или более сложный Webview.
*   **Связанные Артефакты:** FT-IDE.4.6-4.9, FT-IDE.5.3, FT-TASK.9, FT-PLAN.2.
*   **<<<Окончание задачи>>> 4.6.0**