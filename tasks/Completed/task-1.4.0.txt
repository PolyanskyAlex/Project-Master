**>>>ЗАДАЧА<<< 1.4.0: Реализация базовой аутентификации по API-ключу**
*   **Статус:** Ожидание
*   **Зависимости:** 1.3.0
*   **Приоритет:** Высокий
*   **Ответственный:** AI-Backend-Agent
*   **Подробнейшее Описание:**
    *   **Логика работы:** В `config/config.go` добавить загрузку `API_KEY` из `.env`. В `services/auth_service.go` реализовать функцию для проверки API-ключа. В `router/router.go` создать middleware для `chi`, который будет проверять наличие и валидность `X-API-Key` заголовка для всех защищенных маршрутов.
    *   **Схемы/диаграммы:**
        ```
        Request -> Middleware (Check API Key) -> Handler
        ```
    *   **Примеры кода:**
        ```go
        // services/auth_service.go
        package services
        import "your_module_name/config"
        type AuthService struct { apiKey string }
        func NewAuthService(cfg *config.Config) *AuthService { return &AuthService{apiKey: cfg.APIKey} }
        func (s *AuthService) IsAPIKeyValid(key string) bool { return key == s.apiKey }

        // router/router.go (фрагмент)
        import ( "net/http"; "github.com/go-chi/chi/v5"; "your_module_name/services" )
        func AuthMiddleware(authService *services.AuthService) func(next http.Handler) http.Handler {
            return func(next http.Handler) http.Handler {
                return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
                    apiKey := r.Header.Get("X-API-Key")
                    if !authService.IsAPIKeyValid(apiKey) {
                        http.Error(w, "Unauthorized", http.StatusUnauthorized)
                        return
                    }
                    next.ServeHTTP(w, r)
                })
            }
        }
        // В NewRouter:
        // authService := services.NewAuthService(cfg)
        // r.Group(func(r chi.Router) { r.Use(AuthMiddleware(authService)); /* protected routes */ })
        ```
    *   **Цель задачи:** Защитить API от несанкционированного доступа.
    *   **Входные данные:** `API_KEY` в `.env`.
    *   **Выходные данные/Ожидаемый результат:** Запросы без валидного API-ключа получают 401 Unauthorized.
*   **Критерии Приемки:**
    *   Запрос к защищенному эндпоинту без `X-API-Key` возвращает 401.
    *   Запрос к защищенному эндпоинту с корректным `X-API-Key` возвращает 200.
*   **Технические Детали/Инструкции:**
    *   Использовать `chi.Middleware` для создания middleware.
    *   API-ключ должен быть простой строкой на этом этапе.
*   **Связанные Артефакты:** FT-USER.1, NFT-SEC.1.
*   **<<<Окончание задачи>>> 1.4.0** 