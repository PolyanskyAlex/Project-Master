**>>>ЗАДАЧА<<< 2.6.0: Реализация Управления Планом Разработки**
*   **Статус:** Ожидание
*   **Зависимости:** 2.2.0, 2.3.0
*   **Приоритет:** Высокий
*   **Ответственный:** AI-Backend-Agent
*   **Подробнейшее Описание:**
    *   **Логика работы:**
        *   Определить `models.ProjectPlanSequence` (id, project_id, task_id, sequence_order, created_at, updated_at).
        *   Реализовать `repositories.ProjectPlanRepository` с методами `SavePlanSequence` (для сохранения/обновления порядка задач), `GetPlanSequenceByProjectID`, `DeletePlanSequenceByProjectID`.
        *   Реализовать `services.ProjectPlanService` с методами `UpdateProjectPlan` (принимает список `task_id` в нужном порядке), `GetProjectPlan`, `GetNextTaskInPlan`.
        *   Метод `GetNextTaskInPlan` должен:
            *   Получить текущий план для проекта.
            *   Итерировать по задачам в плане, проверяя их статус.
            *   Вернуть первую задачу, которая находится в статусе "To Do", "In Progress" или "Blocked".
        *   Реализовать `handlers.ProjectPlanHandler` с HTTP-методами для получения и обновления плана.
        *   Зарегистрировать маршруты: `GET /api/v1/projects/{id}/plan`, `PUT /api/v1/projects/{id}/plan`, `GET /api/v1/projects/{id}/plan/next-task`.
    *   **Схемы/диаграммы:** См. 2.5. Модели Данных (`project_plan_sequences`).
    *   **Примеры кода:**
        ```go
        // services/project_plan_service.go (фрагмент)
        package services
        import ( "context"; "sort"; "your_module_name/models"; "your_module_name/repositories" )
        type ProjectPlanService struct {
            repo *repositories.ProjectPlanRepository
            taskRepo *repositories.TaskRepository
        }
        func NewProjectPlanService(r *repositories.ProjectPlanRepository, tr *repositories.TaskRepository) *ProjectPlanService {
            return &ProjectPlanService{repo: r, taskRepo: tr}
        }
        func (s *ProjectPlanService) UpdateProjectPlan(ctx context.Context, projectID string, taskIDs []string) error {
            // Удалить старый план
            if err := s.repo.DeletePlanSequenceByProjectID(ctx, projectID); err != nil { return err }
            // Сохранить новый план
            for i, taskID := range taskIDs {
                planEntry := &models.ProjectPlanSequence{
                    ProjectID: projectID,
                    TaskID: taskID,
                    SequenceOrder: i + 1,
                }
                if err := s.repo.SavePlanSequence(ctx, planEntry); err != nil { return err }
            }
            return nil
        }
        func (s *ProjectPlanService) GetProjectPlan(ctx context.Context, projectID string) ([]models.Task, error) {
            planEntries, err := s.repo.GetPlanSequenceByProjectID(ctx, projectID)
            if err != nil { return nil, err }
            sort.Slice(planEntries, func(i, j int) bool { return planEntries[i].SequenceOrder < planEntries[j].SequenceOrder })

            var tasks []models.Task
            for _, entry := range planEntries {
                task, err := s.taskRepo.GetByID(ctx, entry.TaskID)
                if err == nil { // Пропустить, если задача не найдена (удалена)
                    tasks = append(tasks, *task)
                }
            }
            return tasks, nil
        }
        func (s *ProjectPlanService) GetNextTaskInPlan(ctx context.Context, projectID string) (*models.Task, error) {
            planEntries, err := s.repo.GetPlanSequenceByProjectID(ctx, projectID)
            if err != nil { return nil, err }
            sort.Slice(planEntries, func(i, j int) bool { return planEntries[i].SequenceOrder < planEntries[j].SequenceOrder })

            for _, planEntry := range planEntries {
                task, err := s.taskRepo.GetByID(ctx, planEntry.TaskID)
                if err != nil { continue } // Пропустить удаленные задачи
                if task.Status == "To Do" || task.Status == "In Progress" || task.Status == "Blocked" {
                    return task, nil
                }
            }
            return nil, nil // Нет следующей задачи
        }
        ```
    *   **Цель задачи:** Обеспечить возможность определения и получения последовательности выполнения задач в проекте.
    *   **Входные данные:** Список UUID задач в желаемом порядке.
    *   **Выходные данные/Ожидаемый результат:** План успешно сохраняется, можно получить следующую задачу по плану.
*   **Критерии Приемки:**
    *   План сохраняется и извлекается в правильном порядке.
    *   `GetNextTaskInPlan` корректно определяет следующую задачу в соответствии со статусами.
    *   Все операции логируются.
*   **Технические Детали/Инструкции:**
    *   При обновлении плана, сначала удалить все старые записи для проекта, затем вставить новые.
*   **Связанные Артефакты:** FT-PLAN.1-3, FT-BE.1-6.
*   **<<<Окончание задачи>>> 2.6.0**